import os
import time
import logging
import shutil
from pathlib import Path
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import config
from user_manager import UserManager
from path_utils import (
    get_app_directory, 
    get_files_directory, 
    get_completed_directory, 
    get_failed_directory,
    get_log_file_path,
    ensure_directories_exist
)

def clear_screen():
    """‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏ö‡∏ö Cross-Platform"""
    os.system('cls' if os.name == 'nt' else 'clear')

class DSLAutoFillBot:
    def __init__(self):
        self.driver = None
        self.user_manager = UserManager()
        self.setup_logging()
        self.setup_result_logs()
        self.setup_directories()
        # ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô
    
    def setup_result_logs(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        self.success_log_file = get_log_file_path("success.log")
        self.failed_log_file = get_log_file_path("failed.log")
        
        # ‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á log ‡πÄ‡∏Å‡πà‡∏≤ - ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏ß‡πâ
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á session
        session_start = f"==================== SESSION START: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ====================\n"
        with open(str(self.success_log_file), 'a', encoding='utf-8') as f:
            f.write(session_start)
        with open(str(self.failed_log_file), 'a', encoding='utf-8') as f:
            f.write(session_start)
    
    def setup_directories(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß"""
        # ‡πÉ‡∏ä‡πâ path_utils ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö executable
        ensure_directories_exist()
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        self.completed_dir = get_completed_directory()
        self.failed_dir = get_failed_directory()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
        self.completed_disbursement_dir = self.completed_dir / "disbursement"
        self.completed_sign_contract_dir = self.completed_dir / "sign-contract"
        self.failed_disbursement_dir = self.failed_dir / "disbursement"
        self.failed_sign_contract_dir = self.failed_dir / "sign-contract"
        
        self.log(f"üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {self.completed_dir} (disbursement, sign-contract)")
        self.log(f"üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {self.failed_dir} (disbursement, sign-contract)")
    
    def log_success(self, filename):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{filename} {current_time}\n"
        with open(str(self.success_log_file), 'a', encoding='utf-8') as f:
            f.write(log_entry)
    
    def log_failed(self, filename):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{filename} {current_time}\n"
        with open(str(self.failed_log_file), 'a', encoding='utf-8') as f:
            f.write(log_entry)
    
    def log_duplicate_action(self, filename):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô duplicate action (‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{filename} {current_time} - DUPLICATE_ACTION\n"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå duplicate.log ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        duplicate_log_file = get_log_file_path("duplicate.log")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô session ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á session
        if not hasattr(self, '_duplicate_session_started'):
            session_start = f"==================== SESSION START: {current_time} ====================\n"
            with open(str(duplicate_log_file), 'a', encoding='utf-8') as f:
                f.write(session_start)
            self._duplicate_session_started = True
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å entry
        with open(str(duplicate_log_file), 'a', encoding='utf-8') as f:
            f.write(log_entry)
    
    def move_file_to_completed(self, filename, source_directory):
        """‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå completed"""
        try:
            source_path = os.path.join(str(source_directory), filename)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å destination folder ‡∏ï‡∏≤‡∏° source directory
            if "disbursement" in str(source_directory):
                dest_dir = self.completed_disbursement_dir
                feature_name = "disbursement"
            elif "sign-contract" in str(source_directory):
                dest_dir = self.completed_sign_contract_dir
                feature_name = "sign-contract"
            else:
                # fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
                dest_dir = self.completed_dir
                feature_name = "general"
            
            dest_path = os.path.join(str(dest_dir), filename)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if os.path.exists(dest_path):
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
                timestamp = datetime.now().strftime("_%Y%m%d_%H%M%S")
                name, ext = os.path.splitext(filename)
                dest_path = os.path.join(str(dest_dir), f"{name}{timestamp}{ext}")
            
            shutil.move(source_path, dest_path)
            self.log(f"üì¶ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÑ‡∏õ completed/{feature_name}/ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            self.log_error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÑ‡∏õ completed/: {str(e)}")
            return False
    
    def move_file_to_failed(self, filename, source_directory):
        """‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå failed"""
        try:
            source_path = os.path.join(str(source_directory), filename)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å destination folder ‡∏ï‡∏≤‡∏° source directory
            if "disbursement" in str(source_directory):
                dest_dir = self.failed_disbursement_dir
                feature_name = "disbursement"
            elif "sign-contract" in str(source_directory):
                dest_dir = self.failed_sign_contract_dir
                feature_name = "sign-contract"
            else:
                # fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
                dest_dir = self.failed_dir
                feature_name = "general"
            
            dest_path = os.path.join(str(dest_dir), filename)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if os.path.exists(dest_path):
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
                timestamp = datetime.now().strftime("_%Y%m%d_%H%M%S")
                name, ext = os.path.splitext(filename)
                dest_path = os.path.join(str(dest_dir), f"{name}{timestamp}{ext}")
            
            shutil.move(source_path, dest_path)
            self.log(f"üì¶ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÑ‡∏õ failed/{feature_name}/ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            self.log_error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÑ‡∏õ failed/: {str(e)}")
            return False
    
    def setup_logging(self):
        if config.LOG_ENABLED:
            log_file_path = get_log_file_path(config.LOG_FILE)
            logging.basicConfig(
                filename=str(log_file_path),
                level=logging.INFO,
                format='%(asctime)s - %(levelname)s - %(message)s',
                filemode='w'
            )
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° console handler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô terminal ‡∏î‡πâ‡∏ß‡∏¢
            console = logging.StreamHandler()
            console.setLevel(logging.INFO)
            formatter = logging.Formatter('[%(levelname)s] %(message)s')
            console.setFormatter(formatter)
            logging.getLogger('').addHandler(console)
            
            self.logger = logging.getLogger(__name__)
        else:
            self.logger = None
    
    def log(self, message):
        if self.logger:
            self.logger.info(message)
        else:
            print(f"[INFO] {message}")
    
    def log_warning(self, message):
        if self.logger:
            self.logger.warning(message)
        else:
            print(f"[WARNING] {message}")
    
    def log_error(self, message):
        if self.logger:
            self.logger.error(message)
        else:
            print(f"[ERROR] {message}")
    
    def setup_driver(self):
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if config.USE_EXISTING_BROWSER:
                return self.connect_to_existing_browser()
            else:
                return self.create_new_browser()
        except Exception as e:
            self.log_error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: {str(e)}")
            raise
    
    def connect_to_existing_browser(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            self.log("üîó ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß...")
            
            chrome_options = Options()
            chrome_options.add_experimental_option("debuggerAddress", f"127.0.0.1:{config.CHROME_DEBUG_PORT}")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ChromeDriver service
            try:
                self.driver = webdriver.Chrome(options=chrome_options)
                self.log("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ó‡πá‡∏ö
                handles = self.driver.window_handles
                self.log(f"üîç ‡∏û‡∏ö {len(handles)} ‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå")
                
                self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
                self.wait = WebDriverWait(self.driver, config.ELEMENT_WAIT_TIMEOUT)
                
                return True
                
            except Exception as connect_error:
                self.log_warning(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà: {str(connect_error)}")
                self.log("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Chrome ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á debug mode ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô USE_EXISTING_BROWSER = False")
                self.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô...")
                return self.create_new_browser()
                
        except Exception as e:
            self.log_error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå: {str(e)}")
            raise
    
    def create_new_browser(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà"""
        try:
            chrome_options = Options()
            if config.HEADLESS_MODE:
                chrome_options.add_argument("--headless")
            
            chrome_options.add_argument(f"--window-size={config.WINDOW_SIZE[0]},{config.WINDOW_SIZE[1]}")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-plugins") 
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--disable-web-security")
            chrome_options.add_argument("--allow-running-insecure-content")
            chrome_options.add_argument("--remote-debugging-port=9222")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Cross-Platform (Mac ARM, Mac Intel, Windows, Linux)
            import platform
            system = platform.system()
            processor = platform.processor()
            
            self.log(f"üñ•Ô∏è  ‡∏£‡∏∞‡∏ö‡∏ö: {system} ({processor})")
            
            try:
                if system == "Darwin" and processor == "arm":
                    # Mac ARM (M1/M2/M3)
                    try:
                        service = Service()  # ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô Homebrew
                        self.driver = webdriver.Chrome(service=service, options=chrome_options)
                        self.log("‚úÖ ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏à‡∏≤‡∏Å Homebrew (Mac ARM)")
                    except:
                        service = Service(ChromeDriverManager().install())
                        self.driver = webdriver.Chrome(service=service, options=chrome_options)
                        self.log("‚úÖ ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏à‡∏≤‡∏Å WebDriver Manager (Mac ARM)")
                
                elif system == "Darwin":
                    # Mac Intel
                    service = Service(ChromeDriverManager().install())
                    self.driver = webdriver.Chrome(service=service, options=chrome_options)
                    self.log("‚úÖ ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mac Intel")
                
                elif system == "Windows":
                    # Windows (Intel/AMD)
                    service = Service(ChromeDriverManager().install())
                    self.driver = webdriver.Chrome(service=service, options=chrome_options)
                    self.log("‚úÖ ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows")
                
                else:
                    # Linux ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                    service = Service(ChromeDriverManager().install())
                    self.driver = webdriver.Chrome(service=service, options=chrome_options)
                    self.log(f"‚úÖ ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {system}")
                    
            except Exception as driver_error:
                # Fallback: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ ChromeDriver ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô PATH
                self.log_warning(f"‚ö†Ô∏è  WebDriver Manager ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(driver_error)}")
                self.log("üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ ChromeDriver ‡∏à‡∏≤‡∏Å PATH...")
                try:
                    service = Service()  # ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô PATH
                    self.driver = webdriver.Chrome(service=service, options=chrome_options)
                    self.log("‚úÖ ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏à‡∏≤‡∏Å PATH ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                except Exception as fallback_error:
                    self.log_error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ ChromeDriver ‡∏à‡∏≤‡∏Å PATH: {str(fallback_error)}")
                    raise driver_error  # ‡πÅ‡∏™‡∏î‡∏á error ‡πÄ‡∏î‡∏¥‡∏°
            
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.wait = WebDriverWait(self.driver, config.ELEMENT_WAIT_TIMEOUT)
            self.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            return True
            
        except Exception as e:
            self.log_error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: {str(e)}")
            raise
    
    def get_files_list(self, directory_path):
        try:
            directory_path = Path(directory_path)
            if not directory_path.exists():
                directory_path.mkdir(parents=True, exist_ok=True)
                self.log(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {directory_path}")
            
            files = []
            for file_path in directory_path.iterdir():
                if file_path.is_file():
                    file_ext = file_path.suffix.lower()
                    if file_ext in config.ALLOWED_EXTENSIONS:
                        files.append(file_path.name)
            
            self.log(f"‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {len(files)} ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {directory_path.name}")
            return files
            
        except Exception as e:
            self.log_error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
            return []
    
    def extract_filename_without_extension(self, filename):
        return Path(filename).stem
    
    def wait_for_overlay_disappear(self, timeout=10):
        """‡∏£‡∏≠‡πÉ‡∏´‡πâ loading overlay ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ"""
        try:
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ loading overlay ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
            overlay_selectors = [
                ".ngx-spinner-overlay",
                "[class*='spinner-overlay']",
                "[class*='loading-overlay']"
            ]
            
            for selector in overlay_selectors:
                try:
                    WebDriverWait(self.driver, timeout).until(
                        EC.invisibility_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    self.log(f"‚è≥ ‡∏£‡∏≠ loading overlay ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ({selector})")
                    break
                except TimeoutException:
                    continue
            
            # ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
            time.sleep(0.5)
            return True
            
        except Exception as e:
            self.log_warning(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö overlay: {str(e)}")
            return True  # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏≤‡∏á
    
    def wait_and_click(self, selector, description="element", timeout=None):
        try:
            wait_time = timeout if timeout else config.ELEMENT_WAIT_TIMEOUT
            wait = WebDriverWait(self.driver, wait_time)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ loading overlay ‡∏´‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
            important_buttons = ["‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°", "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å", "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"]
            if any(keyword in description for keyword in important_buttons):
                self.wait_for_overlay_disappear()
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ element ‡∏Å‡πà‡∏≠‡∏ô
            element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ element clickable
            element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if element.is_enabled() and element.is_displayed():
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö radio button ‡∏´‡∏£‡∏∑‡∏≠ checkbox ‡πÉ‡∏ä‡πâ JavaScript click
                if "radio" in description.lower() or "checkbox" in description.lower():
                    self.driver.execute_script("arguments[0].click();", element)
                    self.log(f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å {description} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ JavaScript)")
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å overlay ‡∏ö‡∏±‡∏á ‡πÉ‡∏ä‡πâ JavaScript click
                elif any(keyword in description for keyword in important_buttons):
                    self.driver.execute_script("arguments[0].click();", element)
                    self.log(f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å {description} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ JavaScript)")
                else:
                    element.click()
                    self.log(f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å {description} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                self.log_warning(f"‚ö†Ô∏è  {description} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ (element ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)")
                return False
                
            time.sleep(config.WAIT_TIME)
            return True
            
        except TimeoutException:
            self.log_error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö {description} (Selector: {selector})")
            return False
        except Exception as e:
            self.log_error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å {description}: {str(e)}")
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ JavaScript click ‡πÄ‡∏õ‡πá‡∏ô fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            if any(keyword in description for keyword in important_buttons):
                try:
                    element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    self.driver.execute_script("arguments[0].click();", element)
                    self.log(f"‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å {description} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ JavaScript Fallback)")
                    time.sleep(config.WAIT_TIME)
                    return True
                except:
                    pass
            return False
    
    def wait_and_send_keys(self, selector, text, description="input field", clear_first=True):
        try:
            element = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
            if clear_first:
                element.clear()
            element.send_keys(text)
            self.log(f"‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '{text}' ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {description} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        except TimeoutException:
            self.log_error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á {description} (Selector: {selector})")
            return False
        except Exception as e:
            self.log_error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {description}: {str(e)}")
            return False
    
    def wait_and_upload_file(self, selector, file_path, description="file input"):
        try:
            element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
            element.send_keys(file_path)
            self.log(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {file_path} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä DOM
            time.sleep(config.WAIT_TIME)
            return True
        except TimeoutException:
            self.log_error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {description} (Selector: {selector})")
            return False
        except Exception as e:
            self.log_error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {str(e)}")
            return False
    
    def check_element_exists(self, selector, description="element", timeout=5):
        try:
            wait = WebDriverWait(self.driver, timeout)
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
            return True
        except TimeoutException:
            return False
    
    def check_button_by_text(self, selector, button_text, description="button", timeout=5):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        try:
            wait = WebDriverWait(self.driver, timeout)
            elements = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, selector)))
            
            for element in elements:
                if button_text in element.text:
                    self.log(f"üîç ‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏° '{button_text}' - {description}")
                    return True
            return False
        except TimeoutException:
            return False
    
    def handle_dynamic_checkboxes(self, feature_type="disbursement"):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ checkbox ‡πÅ‡∏ö‡∏ö dynamic - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 ‡∏´‡∏£‡∏∑‡∏≠ 3 checkbox"""
        try:
            if feature_type == "sign-contract":
                # Checkbox selectors ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤
                checkbox_selectors = [
                    # ‡∏Å‡∏£‡∏ì‡∏µ 2 Checkbox
                    {
                        "address1": config.SIGN_CONTRACT_ADDRESS_CHECKBOX_SELECTOR,
                        "contract": config.SIGN_CONTRACT_CONTRACT_CHECKBOX_2_CASE_SELECTOR
                    },
                    # ‡∏Å‡∏£‡∏ì‡∏µ 3 Checkbox
                    {
                        "address1": config.SIGN_CONTRACT_ADDRESS_CHECKBOX_SELECTOR,
                        "address2": config.SIGN_CONTRACT_OPTIONAL_CHECKBOX_SELECTOR,
                        "contract": config.SIGN_CONTRACT_CONTRACT_CHECKBOX_SELECTOR
                    }
                ]
            else:
                # Checkbox selectors ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏° (disbursement)
                checkbox_selectors = [
                    # ‡∏Å‡∏£‡∏ì‡∏µ 2 Checkbox
                    {
                        "address1": config.ADDRESS_CHECKBOX_SELECTOR,
                        "contract": config.CONTRACT_CHECKBOX_SELECTOR
                    },
                    # ‡∏Å‡∏£‡∏ì‡∏µ 3 Checkbox
                    {
                        "address1": config.ADDRESS_CHECKBOX_SELECTOR,
                        "address2": config.OPTIONAL_CHECKBOX_SELECTOR,
                        "contract": config.CONTRACT_CHECKBOX_3_CASE_SELECTOR
                    }
                ]
            
            # ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏´‡∏ô
            has_3_checkboxes = self.check_element_exists(checkbox_selectors[1]["address2"], "Address2 Checkbox", timeout=2)
            
            if has_3_checkboxes:
                self.log("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ 3 Checkbox")
                selectors = checkbox_selectors[1]  # ‡πÉ‡∏ä‡πâ selectors ‡∏Å‡∏£‡∏ì‡∏µ 3 checkbox
                
                # ‡∏Ñ‡∏•‡∏¥‡∏Å Address 1
                if not self.wait_and_click(selectors["address1"], "Checkbox Address Panel (1/3)"):
                    return False
                
                # ‡∏Ñ‡∏•‡∏¥‡∏Å Address 2  
                if not self.wait_and_click(selectors["address2"], "Checkbox Address Panel (2/3)"):
                    return False
                
                # ‡∏Ñ‡∏•‡∏¥‡∏Å Contract
                if not self.wait_and_click(selectors["contract"], "Checkbox Contract Panel (3/3)"):
                    return False
                    
                self.log("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å Checkbox ‡∏ó‡∏±‡πâ‡∏á 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                
            else:
                self.log("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ 2 Checkbox")
                selectors = checkbox_selectors[0]  # ‡πÉ‡∏ä‡πâ selectors ‡∏Å‡∏£‡∏ì‡∏µ 2 checkbox
                
                # ‡∏Ñ‡∏•‡∏¥‡∏Å Address
                if not self.wait_and_click(selectors["address1"], "Checkbox Address Panel (1/2)"):
                    return False
                
                # ‡∏Ñ‡∏•‡∏¥‡∏Å Contract
                if not self.wait_and_click(selectors["contract"], "Checkbox Contract Panel (2/2)"):
                    return False
                    
                self.log("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å Checkbox ‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
            return True
            
        except Exception as e:
            self.log_error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Checkbox: {str(e)}")
            return False
    

    def auto_login(self):
        """Login ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    self.log(f"üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1}/{max_retries}...")
                    time.sleep(5)  # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                
                self.log("üîê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Login ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
                
                # 1. ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Login
                self.log(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Login: {config.LOGIN_PAGE_URL}")
                self.driver.get(config.LOGIN_PAGE_URL)
                
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (Smart Wait)
                WebDriverWait(self.driver, config.PAGE_LOAD_TIMEOUT).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, config.USERNAME_SELECTOR))
                )
                
                # ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
                self.log("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ Login ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå...")
                time.sleep(2)
                
                # 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_user = self.user_manager.get_current_user()
                if not current_user:
                    self.log_error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
                    return False
                
                username = current_user['username']
                password = current_user['password']
                
                self.log(f"üîê ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {current_user['name']} ({username})")
                
                # 3. ‡∏Å‡∏£‡∏≠‡∏Å Username
                if not self.wait_and_send_keys(config.USERNAME_SELECTOR, username, "‡∏ä‡πà‡∏≠‡∏á Username"):
                    continue  # ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                
                # 4. ‡∏Å‡∏£‡∏≠‡∏Å Password
                if not self.wait_and_send_keys(config.PASSWORD_SELECTOR, password, "‡∏ä‡πà‡∏≠‡∏á Password"):
                    continue  # ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                
                # 5. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                if not self.wait_and_click(config.LOGIN_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
                    continue  # ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                
                # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏•‡∏±‡∏á submit login
                time.sleep(3)
                
                # 6. ‡∏£‡∏≠‡πÉ‡∏´‡πâ Login ‡πÄ‡∏™‡∏£‡πá‡∏à (Smart Wait)
                self.log("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö Login ‡πÄ‡∏™‡∏£‡πá‡∏à...")
                try:
                    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ URL ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ login
                    WebDriverWait(self.driver, 30).until(
                        lambda driver: config.LOGIN_PAGE_URL not in driver.current_url
                    )
                except TimeoutException:
                    self.log_warning("‚ö†Ô∏è Login ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô - ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
                
                # 7. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                self.log(f"üéØ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {config.WEBSITE_URL}")
                self.driver.get(config.WEBSITE_URL)
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
                WebDriverWait(self.driver, config.PAGE_LOAD_TIMEOUT).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, config.RADIO_SELECTOR))
                )
                
                self.log("‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
                return True
                
            except Exception as e:
                self.log_error(f"‚ùå ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")
                if attempt == max_retries - 1:  # ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                    self.log_error("‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    return False
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏à‡∏∞ continue loop
        
        return False  # ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ

    def process_single_file(self, filename, source_directory):
        try:
            self.log(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: {filename}")
            
            # 1. Login ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å)
            if not hasattr(self, '_login_completed'):
                if not self.auto_login():
                    return False
                self._login_completed = True
            else:
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÜ ‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà refresh)
                current_url = self.driver.current_url
                if config.WEBSITE_URL not in current_url:
                    self.log(f"üéØ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {config.WEBSITE_URL}")
                    self.driver.get(config.WEBSITE_URL)
                    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
                    WebDriverWait(self.driver, config.PAGE_LOAD_TIMEOUT).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, config.RADIO_SELECTOR))
                    )
                else:
                    self.log("‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
            
            # 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Radio Button #radio2
            if not self.wait_and_click(config.RADIO_SELECTOR, "Radio Button #radio2"):
                return False
            
            # 3. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡∏ï‡∏±‡∏î‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏≠‡∏≠‡∏Å) ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            search_text = self.extract_filename_without_extension(filename)
            if not self.wait_and_send_keys(config.SEARCH_INPUT_SELECTOR, search_text, "‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"):
                return False
            
            # 4. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            if not self.wait_and_click(config.SEARCH_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"):
                return False
            
            # 5. ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Smart Wait - ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏à‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠ error message)
            try:
                WebDriverWait(self.driver, 5).until(
                    lambda driver: driver.find_elements(By.CSS_SELECTOR, config.DISBURSEMENT_CONFIRM_BUTTON_SELECTOR) or 
                                  driver.find_elements(By.CSS_SELECTOR, ".no-data, .empty-result") or
                                  driver.find_elements(By.CSS_SELECTOR, "p.text-green-chartreuse")
                )
            except TimeoutException:
                pass  # ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            
            
            # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ selector ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
            table_button_selector = "body > dsl-workspace-root > app-content-layout > div > div > main > article > dsl-workspace-disbursement > main > section.data-table.full.rounded-none > dsl-workspace-table-v2 > div.max-w-full.overflow-x-auto > table > tbody > tr > td:nth-child(8) > div > div:nth-child(1) > dsl-workspace-button > button"
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            has_import_button = self.check_button_by_text(table_button_selector, "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", "‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏≥ consent ‡πÅ‡∏•‡πâ‡∏ß", timeout=3)
            has_disbursement_button = self.check_button_by_text(table_button_selector, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°", "‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà", timeout=3)
            
            if not has_disbursement_button and not has_import_button:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏°)
                success_message_selector = "p.text-green-chartreuse"
                try:
                    success_elements = self.driver.find_elements(By.CSS_SELECTOR, success_message_selector)
                    for element in success_elements:
                        if "‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" in element.text:
                            self.log(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {element.text}")
                            self.log(f"üéØ ‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡∏ñ‡∏π‡∏Å‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß - ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ completed (‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏°)")
                            self.log_duplicate_action(filename)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô duplicate action
                            return True  # ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                except Exception as e:
                    pass  # ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£
                
                self.log_warning(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå '{filename}' - ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
                return False
            
            # ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏°‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ (‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥)
            if has_disbursement_button:
                self.log(f"üîç ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏° - ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ consent")
                
                # 6a. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°
                if not self.wait_and_click(table_button_selector, "‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°"):
                    return False
                
                # 7-9. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Checkbox ‡πÅ‡∏ö‡∏ö Dynamic (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 ‡∏´‡∏£‡∏∑‡∏≠ 3 checkbox)
                if not self.handle_dynamic_checkboxes("disbursement"):
                    return False
                
                # 10. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ô consent page
                if not self.wait_and_click(config.CONSENT_CONFIRM_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ô Consent Page"):
                    return False
                
                # 11. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                if not self.wait_and_click(config.GO_TO_FILE_SELECTION_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"):
                    return False
                    
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥ consent ‡πÅ‡∏•‡πâ‡∏ß (‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£)
            elif has_import_button:
                self.log(f"üîç ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ - ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏≥ consent ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏° consent page")
                
                # 6b. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏à‡∏∞‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
                if not self.wait_and_click(table_button_selector, "‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏Ç‡πâ‡∏≤‡∏° consent)"):
                    return False
            
            # 12. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á 2 ‡∏Å‡∏£‡∏ì‡∏µ)
            file_path = os.path.abspath(os.path.join(source_directory, filename))
            if not self.wait_and_upload_file(config.FILE_INPUT_SELECTOR, file_path, "‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"):
                return False
            
            # 13. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
            if not self.wait_and_click(config.FILE_UPLOAD_CONFIRM_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå"):
                return False
            
            # 14. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ã‡πâ‡∏≥
            if not self.wait_and_click(config.BACK_TO_START_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"):
                return False
            
            self.log(f"üéâ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return True
            
        except Exception as e:
            self.log_error(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå '{filename}': {str(e)}")
            return False

    def process_sign_contract_file(self, filename, source_directory):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô"""
        try:
            self.log(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: {filename}")
            
            # 1. Login ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å)
            if not hasattr(self, '_sign_contract_login_completed'):
                if not self.auto_sign_contract_login():
                    return False
                self._sign_contract_login_completed = True
            else:
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÜ ‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                current_url = self.driver.current_url
                if config.SIGN_CONTRACT_URL not in current_url:
                    self.log(f"üéØ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤: {config.SIGN_CONTRACT_URL}")
                    self.driver.get(config.SIGN_CONTRACT_URL)
                    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
                    WebDriverWait(self.driver, config.PAGE_LOAD_TIMEOUT).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, config.SIGN_CONTRACT_RADIO_SELECTOR))
                    )
                else:
                    self.log("‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
            
            # 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Radio Button #radio2
            if not self.wait_and_click(config.SIGN_CONTRACT_RADIO_SELECTOR, "Radio Button #radio2 (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 3. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡∏ï‡∏±‡∏î‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏≠‡∏≠‡∏Å) ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            search_text = self.extract_filename_without_extension(filename)
            if not self.wait_and_send_keys(config.SIGN_CONTRACT_SEARCH_INPUT_SELECTOR, search_text, "‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 4. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            if not self.wait_and_click(config.SIGN_CONTRACT_SEARCH_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 5. ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            try:
                WebDriverWait(self.driver, 5).until(
                    lambda driver: driver.find_elements(By.CSS_SELECTOR, config.SIGN_CONTRACT_BUTTON_SELECTOR) or 
                                  driver.find_elements(By.CSS_SELECTOR, ".no-data, .empty-result")
                )
            except TimeoutException:
                pass  # ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            
            # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤
            has_sign_contract_button = self.check_button_by_text(config.SIGN_CONTRACT_BUTTON_SELECTOR, "‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤", "‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤", timeout=3)
            
            if not has_sign_contract_button:
                self.log_warning(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå '{filename}' - ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
                return False
            
            self.log(f"üîç ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤ - ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤")
            
            # 7. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤
            if not self.wait_and_click(config.SIGN_CONTRACT_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤"):
                return False
            
            # 8. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Checkbox ‡πÅ‡∏ö‡∏ö Dynamic (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 ‡∏´‡∏£‡∏∑‡∏≠ 3 checkbox)
            if not self.handle_dynamic_checkboxes("sign-contract"):
                return False
            
            # 9. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ô consent page
            if not self.wait_and_click(config.SIGN_CONTRACT_CONSENT_CONFIRM_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ô Consent Page (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 10. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
            if not self.wait_and_click(config.SIGN_CONTRACT_GO_TO_FILE_SELECTION_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 11. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
            file_path = os.path.abspath(os.path.join(source_directory, filename))
            if not self.wait_and_upload_file(config.SIGN_CONTRACT_FILE_INPUT_SELECTOR, file_path, "‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 12. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
            if not self.wait_and_click(config.SIGN_CONTRACT_FILE_UPLOAD_CONFIRM_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 13. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ã‡πâ‡∏≥
            if not self.wait_and_click(config.SIGN_CONTRACT_BACK_TO_START_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            self.log(f"üéâ ‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå '{filename}' ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return True
            
        except Exception as e:
            self.log_error(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå '{filename}': {str(e)}")
            return False

    def auto_sign_contract_login(self):
        """Login ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        try:
            self.log("üîê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Login ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤...")
            
            # 1. ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Login
            self.log(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Login: {config.LOGIN_PAGE_URL}")
            self.driver.get(config.LOGIN_PAGE_URL)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à (Smart Wait)
            WebDriverWait(self.driver, config.PAGE_LOAD_TIMEOUT).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, config.USERNAME_SELECTOR))
            )
            
            # ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
            self.log("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ Login ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå...")
            time.sleep(2)
            
            # 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_user = self.user_manager.get_current_user()
            if not current_user:
                self.log_error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
                return False
            
            username = current_user['username']
            password = current_user['password']
            
            self.log(f"üîê ‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {current_user['name']} ({username})")
            
            # 3. ‡∏Å‡∏£‡∏≠‡∏Å Username
            if not self.wait_and_send_keys(config.USERNAME_SELECTOR, username, "‡∏ä‡πà‡∏≠‡∏á Username (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 4. ‡∏Å‡∏£‡∏≠‡∏Å Password
            if not self.wait_and_send_keys(config.PASSWORD_SELECTOR, password, "‡∏ä‡πà‡∏≠‡∏á Password (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # 5. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            if not self.wait_and_click(config.LOGIN_BUTTON_SELECTOR, "‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤)"):
                return False
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏•‡∏±‡∏á submit login
            time.sleep(3)
            
            # 6. ‡∏£‡∏≠‡πÉ‡∏´‡πâ Login ‡πÄ‡∏™‡∏£‡πá‡∏à
            self.log("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö Login ‡πÄ‡∏™‡∏£‡πá‡∏à...")
            try:
                WebDriverWait(self.driver, 30).until(
                    lambda driver: config.LOGIN_PAGE_URL not in driver.current_url
                )
            except TimeoutException:
                self.log_warning("‚ö†Ô∏è  Login ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô - ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
            
            # 7. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤
            self.log(f"üéØ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤: {config.SIGN_CONTRACT_URL}")
            self.driver.get(config.SIGN_CONTRACT_URL)
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            WebDriverWait(self.driver, config.PAGE_LOAD_TIMEOUT).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, config.SIGN_CONTRACT_RADIO_SELECTOR))
            )
            
            
            self.log("‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤")
            return True
            
        except Exception as e:
            self.log_error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞ Login ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤: {str(e)}")
            return False
    
    def show_menu(self):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå"""
        clear_screen()
        current_user_info = self.user_manager.get_current_user_info()
        
        print("\n" + "="*60)
        print("ü§ñ DSL Auto Fill Bot - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        print("="*60)
        print(f"üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_user_info}")
        print("="*60)
        print("1. ‚úçÔ∏è  ‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô")
        print("2. üìù ‡∏•‡∏á‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°")
        print("3. üë§ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        print("0. ‚ùå ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        print("="*60)
        
        while True:
            try:
                choice = input("üéØ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (0-3): ").strip()
                if choice in ['0', '1', '2', '3']:
                    return choice
                else:
                    print("‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç 0, 1, 2, ‡∏´‡∏£‡∏∑‡∏≠ 3 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            except KeyboardInterrupt:
                print("\n‚ö†Ô∏è  ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                return '0'
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
                return '0'

    def run_loan_disbursement_feature(self):
        """‡∏£‡∏±‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡∏á‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏° (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°)"""
        try:
            self.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: ‡∏•‡∏á‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°")
            
            # Reset login status ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session ‡πÉ‡∏´‡∏°‡πà
            if hasattr(self, '_login_completed'):
                delattr(self, '_login_completed')
            
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß
            self.setup_driver()
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå disbursement
            disbursement_dir = get_files_directory() / "disbursement"
            files = self.get_files_list(disbursement_dir)
            if not files:
                self.log_warning("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå disbursement ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                return
            
            success_count = 0
            failed_count = 0
            skipped_count = 0
            total_files = len(files)
            
            self.log(f"üìÇ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_files} ‡πÑ‡∏ü‡∏•‡πå")
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
            for i, filename in enumerate(files, 1):
                self.log(f"\n{'='*60}")
                self.log(f"üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà {i}/{total_files}: '{filename}'")
                self.log(f"{'='*60}")
                
                
                result = self.process_single_file(filename, disbursement_dir)
                
                if result:
                    success_count += 1
                    self.log(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
                    self.log_success(filename)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå success.log
                    
                    # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå completed
                    self.move_file_to_completed(filename, disbursement_dir)
                    
                else:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ error ‡∏à‡∏£‡∏¥‡∏á
                    if "‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" in str(self.log):  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        skipped_count += 1
                        self.log(f"‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°: {filename}")
                        self.log_failed(filename)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå failed.log (‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
                        
                        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå failed
                        self.move_file_to_failed(filename, disbursement_dir)
                        
                    else:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏à‡∏£‡∏¥‡∏á
                        failed_count += 1
                        self.log_error(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {filename}")
                        self.log_failed(filename)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå failed.log
                        
                        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå failed
                        self.move_file_to_failed(filename, disbursement_dir)
                
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
                if i < total_files:
                    self.log(f"‚è±Ô∏è  ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...")
                    time.sleep(2)
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            self.log(f"\n{'üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô':=^60}")
            self.log(f"üìÇ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_files}")
            self.log(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}")
            self.log(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {failed_count}")
            self.log(f"‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£): {skipped_count}")
            self.log(f"üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {(success_count/total_files*100):.1f}%")
            self.log(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: success.log, failed.log, duplicate.log")
            self.log(f"{'='*60}")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ session
            session_end = f"==================== SESSION END: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (Success: {success_count}/{total_files}) ====================\n\n"
            with open(str(self.success_log_file), 'a', encoding='utf-8') as f:
                f.write(session_end)
            with open(str(self.failed_log_file), 'a', encoding='utf-8') as f:
                f.write(session_end)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ session ‡πÉ‡∏ô duplicate.log ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if hasattr(self, '_duplicate_session_started'):
                duplicate_log_file = get_log_file_path("duplicate.log")
                with open(str(duplicate_log_file), 'a', encoding='utf-8') as f:
                    f.write(session_end)
            
        except KeyboardInterrupt:
            self.log_warning("‚ö†Ô∏è  ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        except Exception as e:
            self.log_error(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {str(e)}")
        finally:
            # ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
            if hasattr(self, 'driver') and self.driver:
                self.driver.quit()
                self.log("üîö ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß")
                self.driver = None
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
            print()
            input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å...")

    def run_sign_contract_feature(self):
        """‡∏£‡∏±‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô"""
        try:
            self.log("‚úçÔ∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: ‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô")
            
            # Reset login status ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session ‡πÉ‡∏´‡∏°‡πà
            if hasattr(self, '_sign_contract_login_completed'):
                delattr(self, '_sign_contract_login_completed')
            
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß
            self.setup_driver()
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå sign-contract
            sign_contract_dir = get_files_directory() / "sign-contract"
            files = self.get_files_list(sign_contract_dir)
            if not files:
                self.log_warning("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå sign-contract ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                return
            
            success_count = 0
            failed_count = 0
            skipped_count = 0
            total_files = len(files)
            
            self.log(f"üìÇ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_files} ‡πÑ‡∏ü‡∏•‡πå")
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
            for i, filename in enumerate(files, 1):
                self.log(f"\n{'='*60}")
                self.log(f"‚úçÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà {i}/{total_files}: '{filename}'")
                self.log(f"{'='*60}")
                
                
                result = self.process_sign_contract_file(filename, sign_contract_dir)
                
                if result:
                    success_count += 1
                    self.log(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
                    self.log_success(filename)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå success.log
                    
                    # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå completed
                    self.move_file_to_completed(filename, sign_contract_dir)
                    
                else:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ error ‡∏à‡∏£‡∏¥‡∏á
                    if "‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" in str(self.log):  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        skipped_count += 1
                        self.log(f"‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°: {filename}")
                        self.log_failed(filename)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå failed.log (‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
                        
                        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå failed
                        self.move_file_to_failed(filename, sign_contract_dir)
                        
                    else:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏à‡∏£‡∏¥‡∏á
                        failed_count += 1
                        self.log_error(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {filename}")
                        self.log_failed(filename)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå failed.log
                        
                        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå failed
                        self.move_file_to_failed(filename, sign_contract_dir)
                
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
                if i < total_files:
                    self.log(f"‚è±Ô∏è  ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...")
                    time.sleep(2)
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            self.log(f"\n{'üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤':=^60}")
            self.log(f"üìÇ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_files}")
            self.log(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}")
            self.log(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {failed_count}")
            self.log(f"‚è≠Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£): {skipped_count}")
            self.log(f"üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {(success_count/total_files*100):.1f}%")
            self.log(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: success.log, failed.log")
            self.log(f"{'='*60}")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ session
            session_end = f"==================== SESSION END: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (Success: {success_count}/{total_files}) ====================\n\n"
            with open(str(self.success_log_file), 'a', encoding='utf-8') as f:
                f.write(session_end)
            with open(str(self.failed_log_file), 'a', encoding='utf-8') as f:
                f.write(session_end)
            
        except KeyboardInterrupt:
            self.log_warning("‚ö†Ô∏è  ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        except Exception as e:
            self.log_error(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {str(e)}")
        finally:
            # ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
            if hasattr(self, 'driver') and self.driver:
                self.driver.quit()
                self.log("üîö ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß")
                self.driver = None
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
            print()
            input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å...")

    def run_sign_contract_feature_wrapper(self):
        """Wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility"""
        return self.run_sign_contract_feature()

    def run(self):
        try:
            self.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° DSL Auto Fill Bot")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô
            if not self.user_manager.get_current_user():
                clear_screen()
                self.log("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...")
                self.user_manager.show_user_menu()
                # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                if not self.user_manager.get_current_user():
                    clear_screen()
                    self.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                    return
            
            # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
            while True:
                choice = self.show_menu()
                
                if choice == '0':
                    self.log("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                    break
                elif choice == '1':
                    self.user_manager.update_current_user_usage()
                    self.run_sign_contract_feature()
                elif choice == '2':
                    self.user_manager.update_current_user_usage()
                    self.run_loan_disbursement_feature()
                elif choice == '3':
                    self.user_manager.show_user_menu()
                    # ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if not self.user_manager.get_current_user():
                        clear_screen()
                        self.log("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
                        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")
                        continue
            
        except KeyboardInterrupt:
            self.log_warning("‚ö†Ô∏è  ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        except Exception as e:
            self.log_error(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {str(e)}")
        finally:
            self.cleanup()
    
    def cleanup(self):
        if self.driver:
            self.driver.quit()
            self.log("üîö ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == "__main__":
    bot = DSLAutoFillBot()
    bot.run()